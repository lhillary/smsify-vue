/* tslint:disable */
/* eslint-disable */
/**
 * Smsify API
 * This is a REST API application made with Express. It manages contacts, campaigns, messages, and more for Smsify.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiV1CampaignPostRequest
 */
export interface ApiV1CampaignPostRequest {
    /**
     * The name of the campaigns
     * @type {string}
     * @memberof ApiV1CampaignPostRequest
     */
    'name': string;
    /**
     * A brief description of the campaign
     * @type {string}
     * @memberof ApiV1CampaignPostRequest
     */
    'description'?: string;
    /**
     * A phone number associated with the campaign
     * @type {number}
     * @memberof ApiV1CampaignPostRequest
     */
    'phoneNumberId'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1CampaignUpdateCampaignIdPutRequest
 */
export interface ApiV1CampaignUpdateCampaignIdPutRequest {
    /**
     * New name of the campaign
     * @type {string}
     * @memberof ApiV1CampaignUpdateCampaignIdPutRequest
     */
    'name'?: string;
    /**
     * New description of the campaign
     * @type {string}
     * @memberof ApiV1CampaignUpdateCampaignIdPutRequest
     */
    'description'?: string;
    /**
     * New status of the campaign
     * @type {string}
     * @memberof ApiV1CampaignUpdateCampaignIdPutRequest
     */
    'status'?: string;
    /**
     * New phone number id of the campaign
     * @type {number}
     * @memberof ApiV1CampaignUpdateCampaignIdPutRequest
     */
    'phoneNumberId'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1CategoryPostRequest
 */
export interface ApiV1CategoryPostRequest {
    /**
     * The ID of the campaign to which categories are added
     * @type {number}
     * @memberof ApiV1CategoryPostRequest
     */
    'campaignId': number;
    /**
     * List of category labels
     * @type {Array<string>}
     * @memberof ApiV1CategoryPostRequest
     */
    'categoryLabels': Array<string>;
}
/**
 * 
 * @export
 * @interface ApiV1CategoryUpdateCategoryIdPutRequest
 */
export interface ApiV1CategoryUpdateCategoryIdPutRequest {
    /**
     * The new label for the category
     * @type {string}
     * @memberof ApiV1CategoryUpdateCategoryIdPutRequest
     */
    'newLabel'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1ContactPostRequest
 */
export interface ApiV1ContactPostRequest {
    /**
     * The name of the contact
     * @type {string}
     * @memberof ApiV1ContactPostRequest
     */
    'name': string;
    /**
     * The phone number of the contact
     * @type {string}
     * @memberof ApiV1ContactPostRequest
     */
    'phoneNumber': string;
    /**
     * The ID of the campaign this contact is associated with
     * @type {number}
     * @memberof ApiV1ContactPostRequest
     */
    'campaignId': number;
}
/**
 * 
 * @export
 * @interface ApiV1ContactUpdateContactIdPutRequest
 */
export interface ApiV1ContactUpdateContactIdPutRequest {
    /**
     * Updated name of the contact
     * @type {string}
     * @memberof ApiV1ContactUpdateContactIdPutRequest
     */
    'name'?: string;
    /**
     * Updated phone number of the contact
     * @type {string}
     * @memberof ApiV1ContactUpdateContactIdPutRequest
     */
    'phoneNumber'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PhoneNumberAvailableNumbersGet200ResponseInner
 */
export interface ApiV1PhoneNumberAvailableNumbersGet200ResponseInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PhoneNumberAvailableNumbersGet200ResponseInner
     */
    'friendlyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PhoneNumberAvailableNumbersGet200ResponseInner
     */
    'phoneNumber'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PhoneNumberPurchaseNumberPostRequest
 */
export interface ApiV1PhoneNumberPurchaseNumberPostRequest {
    /**
     * The phone number to be purchased
     * @type {string}
     * @memberof ApiV1PhoneNumberPurchaseNumberPostRequest
     */
    'phoneNumber': string;
    /**
     * The country of the phone number
     * @type {string}
     * @memberof ApiV1PhoneNumberPurchaseNumberPostRequest
     */
    'country': string;
}
/**
 * 
 * @export
 * @interface ApiV1SmsReceivePostRequest
 */
export interface ApiV1SmsReceivePostRequest {
    /**
     * The content of the incoming SMS
     * @type {string}
     * @memberof ApiV1SmsReceivePostRequest
     */
    'Body'?: string;
    /**
     * The Twilio SID associated with the message
     * @type {string}
     * @memberof ApiV1SmsReceivePostRequest
     */
    'MessageSid'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1SmsSendBulkPostRequest
 */
export interface ApiV1SmsSendBulkPostRequest {
    /**
     * The ID of the campaign
     * @type {number}
     * @memberof ApiV1SmsSendBulkPostRequest
     */
    'campaignId': number;
    /**
     * The content of the message to send
     * @type {string}
     * @memberof ApiV1SmsSendBulkPostRequest
     */
    'messageContent': string;
    /**
     * The Twilio phone number to send from
     * @type {string}
     * @memberof ApiV1SmsSendBulkPostRequest
     */
    'twilioNumber': string;
}
/**
 * 
 * @export
 * @interface ApiV1SmsStatusPostRequest
 */
export interface ApiV1SmsStatusPostRequest {
    /**
     * The Twilio SID of the message
     * @type {string}
     * @memberof ApiV1SmsStatusPostRequest
     */
    'MessageSid'?: string;
    /**
     * The current status of the message
     * @type {string}
     * @memberof ApiV1SmsStatusPostRequest
     */
    'MessageStatus'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1SubscriptionPostRequest
 */
export interface ApiV1SubscriptionPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SubscriptionPostRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SubscriptionPostRequest
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SubscriptionPostRequest
     */
    'price': number;
}
/**
 * 
 * @export
 * @interface ApiV1SubscriptionUpdateTierIdPutRequest
 */
export interface ApiV1SubscriptionUpdateTierIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SubscriptionUpdateTierIdPutRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SubscriptionUpdateTierIdPutRequest
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SubscriptionUpdateTierIdPutRequest
     */
    'price'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1UserLoginPost200Response
 */
export interface ApiV1UserLoginPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserLoginPost200Response
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserLoginPost200Response
     */
    'token'?: string;
    /**
     * 
     * @type {ApiV1UserLoginPost200ResponseUser}
     * @memberof ApiV1UserLoginPost200Response
     */
    'user'?: ApiV1UserLoginPost200ResponseUser;
}
/**
 * 
 * @export
 * @interface ApiV1UserLoginPost200ResponseUser
 */
export interface ApiV1UserLoginPost200ResponseUser {
    /**
     * 
     * @type {number}
     * @memberof ApiV1UserLoginPost200ResponseUser
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserLoginPost200ResponseUser
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserLoginPost200ResponseUser
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserLoginPost200ResponseUser
     */
    'role'?: string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1UserLoginPost200ResponseUser
     */
    'tierId'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1UserLoginPost401Response
 */
export interface ApiV1UserLoginPost401Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserLoginPost401Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1UserLoginPostRequest
 */
export interface ApiV1UserLoginPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserLoginPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserLoginPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ApiV1UserRegisterPost201Response
 */
export interface ApiV1UserRegisterPost201Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserRegisterPost201Response
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserRegisterPost201Response
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1UserRegisterPostRequest
 */
export interface ApiV1UserRegisterPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserRegisterPostRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserRegisterPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserRegisterPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ApiV1UserUpdatePutRequest
 */
export interface ApiV1UserUpdatePutRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserUpdatePutRequest
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserUpdatePutRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserUpdatePutRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface Campaign
 */
export interface Campaign {
    /**
     * 
     * @type {number}
     * @memberof Campaign
     */
    'campaignId': number;
    /**
     * 
     * @type {number}
     * @memberof Campaign
     */
    'userId': number;
    /**
     * 
     * @type {number}
     * @memberof Campaign
     */
    'phoneNumberId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Campaign
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Campaign
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof Campaign
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Campaign
     */
    'deletedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Campaign
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface CampaignCategory
 */
export interface CampaignCategory {
    /**
     * 
     * @type {number}
     * @memberof CampaignCategory
     */
    'categoryId': number;
    /**
     * 
     * @type {number}
     * @memberof CampaignCategory
     */
    'campaignId': number;
    /**
     * 
     * @type {string}
     * @memberof CampaignCategory
     */
    'categoryLabel': string;
    /**
     * 
     * @type {string}
     * @memberof CampaignCategory
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CampaignCategory
     */
    'deletedAt'?: string;
}
/**
 * 
 * @export
 * @interface Contact
 */
export interface Contact {
    /**
     * 
     * @type {number}
     * @memberof Contact
     */
    'contactId': number;
    /**
     * 
     * @type {number}
     * @memberof Contact
     */
    'userId': number;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'deletedAt'?: string;
}
/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    'messageId': number;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    'campaignId': number;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    'contactId': number;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'messageContent': string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'sentAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'deletedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'twilioSid'?: string;
}
/**
 * 
 * @export
 * @interface PhoneNumber
 */
export interface PhoneNumber {
    /**
     * 
     * @type {number}
     * @memberof PhoneNumber
     */
    'phoneNumberId': number;
    /**
     * 
     * @type {number}
     * @memberof PhoneNumber
     */
    'userId': number;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumber
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumber
     */
    'country': string;
    /**
     * 
     * @type {boolean}
     * @memberof PhoneNumber
     */
    'isActive': boolean;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumber
     */
    'purchasedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumber
     */
    'deletedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PhoneNumber
     */
    'twilioSid': string;
}
/**
 * 
 * @export
 * @interface Response
 */
export interface Response {
    /**
     * 
     * @type {number}
     * @memberof Response
     */
    'responseId': number;
    /**
     * 
     * @type {number}
     * @memberof Response
     */
    'messageId': number;
    /**
     * 
     * @type {string}
     * @memberof Response
     */
    'responseContent': string;
    /**
     * 
     * @type {string}
     * @memberof Response
     */
    'receivedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Response
     */
    'deletedAt'?: string;
}
/**
 * 
 * @export
 * @interface ResponseCategorization
 */
export interface ResponseCategorization {
    /**
     * 
     * @type {number}
     * @memberof ResponseCategorization
     */
    'categorizationId': number;
    /**
     * 
     * @type {number}
     * @memberof ResponseCategorization
     */
    'responseId': number;
    /**
     * 
     * @type {number}
     * @memberof ResponseCategorization
     */
    'categoryId': number;
    /**
     * 
     * @type {string}
     * @memberof ResponseCategorization
     */
    'deletedAt'?: string;
}
/**
 * 
 * @export
 * @interface SubscriptionTier
 */
export interface SubscriptionTier {
    /**
     * 
     * @type {number}
     * @memberof SubscriptionTier
     */
    'tierId': number;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionTier
     */
    'tierName': string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionTier
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionTier
     */
    'price': number;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'userId': number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastLogin'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'passwordHash': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'deletedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'tierId': number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'role': string;
}

/**
 * CampaignManagementApi - axios parameter creator
 * @export
 */
export const CampaignManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve a specific campaign by ID
         * @param {number} campaignId The ID of the campaign to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CampaignCampaignIdGet: async (campaignId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('apiV1CampaignCampaignIdGet', 'campaignId', campaignId)
            const localVarPath = `/api/v1/campaign/{campaignId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a specific campaign
         * @param {number} campaignId The ID of the campaign to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CampaignDeleteCampaignIdPut: async (campaignId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('apiV1CampaignDeleteCampaignIdPut', 'campaignId', campaignId)
            const localVarPath = `/api/v1/campaign/delete/{campaignId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve all campaigns created by the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CampaignGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/campaign/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new campaign
         * @param {ApiV1CampaignPostRequest} apiV1CampaignPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CampaignPost: async (apiV1CampaignPostRequest: ApiV1CampaignPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1CampaignPostRequest' is not null or undefined
            assertParamExists('apiV1CampaignPost', 'apiV1CampaignPostRequest', apiV1CampaignPostRequest)
            const localVarPath = `/api/v1/campaign/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CampaignPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a specific campaign
         * @param {number} campaignId The ID of the campaign to update
         * @param {ApiV1CampaignUpdateCampaignIdPutRequest} apiV1CampaignUpdateCampaignIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CampaignUpdateCampaignIdPut: async (campaignId: number, apiV1CampaignUpdateCampaignIdPutRequest: ApiV1CampaignUpdateCampaignIdPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('apiV1CampaignUpdateCampaignIdPut', 'campaignId', campaignId)
            // verify required parameter 'apiV1CampaignUpdateCampaignIdPutRequest' is not null or undefined
            assertParamExists('apiV1CampaignUpdateCampaignIdPut', 'apiV1CampaignUpdateCampaignIdPutRequest', apiV1CampaignUpdateCampaignIdPutRequest)
            const localVarPath = `/api/v1/campaign/update/{campaignId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CampaignUpdateCampaignIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CampaignManagementApi - functional programming interface
 * @export
 */
export const CampaignManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CampaignManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve a specific campaign by ID
         * @param {number} campaignId The ID of the campaign to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CampaignCampaignIdGet(campaignId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Campaign>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CampaignCampaignIdGet(campaignId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignManagementApi.apiV1CampaignCampaignIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a specific campaign
         * @param {number} campaignId The ID of the campaign to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CampaignDeleteCampaignIdPut(campaignId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CampaignDeleteCampaignIdPut(campaignId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignManagementApi.apiV1CampaignDeleteCampaignIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve all campaigns created by the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CampaignGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Campaign>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CampaignGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignManagementApi.apiV1CampaignGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new campaign
         * @param {ApiV1CampaignPostRequest} apiV1CampaignPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CampaignPost(apiV1CampaignPostRequest: ApiV1CampaignPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Campaign>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CampaignPost(apiV1CampaignPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignManagementApi.apiV1CampaignPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a specific campaign
         * @param {number} campaignId The ID of the campaign to update
         * @param {ApiV1CampaignUpdateCampaignIdPutRequest} apiV1CampaignUpdateCampaignIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CampaignUpdateCampaignIdPut(campaignId: number, apiV1CampaignUpdateCampaignIdPutRequest: ApiV1CampaignUpdateCampaignIdPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Campaign>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CampaignUpdateCampaignIdPut(campaignId, apiV1CampaignUpdateCampaignIdPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignManagementApi.apiV1CampaignUpdateCampaignIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CampaignManagementApi - factory interface
 * @export
 */
export const CampaignManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CampaignManagementApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve a specific campaign by ID
         * @param {number} campaignId The ID of the campaign to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CampaignCampaignIdGet(campaignId: number, options?: any): AxiosPromise<Campaign> {
            return localVarFp.apiV1CampaignCampaignIdGet(campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a specific campaign
         * @param {number} campaignId The ID of the campaign to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CampaignDeleteCampaignIdPut(campaignId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1CampaignDeleteCampaignIdPut(campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve all campaigns created by the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CampaignGet(options?: any): AxiosPromise<Array<Campaign>> {
            return localVarFp.apiV1CampaignGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new campaign
         * @param {ApiV1CampaignPostRequest} apiV1CampaignPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CampaignPost(apiV1CampaignPostRequest: ApiV1CampaignPostRequest, options?: any): AxiosPromise<Campaign> {
            return localVarFp.apiV1CampaignPost(apiV1CampaignPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a specific campaign
         * @param {number} campaignId The ID of the campaign to update
         * @param {ApiV1CampaignUpdateCampaignIdPutRequest} apiV1CampaignUpdateCampaignIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CampaignUpdateCampaignIdPut(campaignId: number, apiV1CampaignUpdateCampaignIdPutRequest: ApiV1CampaignUpdateCampaignIdPutRequest, options?: any): AxiosPromise<Campaign> {
            return localVarFp.apiV1CampaignUpdateCampaignIdPut(campaignId, apiV1CampaignUpdateCampaignIdPutRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CampaignManagementApi - object-oriented interface
 * @export
 * @class CampaignManagementApi
 * @extends {BaseAPI}
 */
export class CampaignManagementApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve a specific campaign by ID
     * @param {number} campaignId The ID of the campaign to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignManagementApi
     */
    public apiV1CampaignCampaignIdGet(campaignId: number, options?: RawAxiosRequestConfig) {
        return CampaignManagementApiFp(this.configuration).apiV1CampaignCampaignIdGet(campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a specific campaign
     * @param {number} campaignId The ID of the campaign to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignManagementApi
     */
    public apiV1CampaignDeleteCampaignIdPut(campaignId: number, options?: RawAxiosRequestConfig) {
        return CampaignManagementApiFp(this.configuration).apiV1CampaignDeleteCampaignIdPut(campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve all campaigns created by the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignManagementApi
     */
    public apiV1CampaignGet(options?: RawAxiosRequestConfig) {
        return CampaignManagementApiFp(this.configuration).apiV1CampaignGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new campaign
     * @param {ApiV1CampaignPostRequest} apiV1CampaignPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignManagementApi
     */
    public apiV1CampaignPost(apiV1CampaignPostRequest: ApiV1CampaignPostRequest, options?: RawAxiosRequestConfig) {
        return CampaignManagementApiFp(this.configuration).apiV1CampaignPost(apiV1CampaignPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a specific campaign
     * @param {number} campaignId The ID of the campaign to update
     * @param {ApiV1CampaignUpdateCampaignIdPutRequest} apiV1CampaignUpdateCampaignIdPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignManagementApi
     */
    public apiV1CampaignUpdateCampaignIdPut(campaignId: number, apiV1CampaignUpdateCampaignIdPutRequest: ApiV1CampaignUpdateCampaignIdPutRequest, options?: RawAxiosRequestConfig) {
        return CampaignManagementApiFp(this.configuration).apiV1CampaignUpdateCampaignIdPut(campaignId, apiV1CampaignUpdateCampaignIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CategoryManagementApi - axios parameter creator
 * @export
 */
export const CategoryManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve all categories by campaign
         * @param {number} campaignId The ID of the campaign to retrieve categories for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CategoryByCampaignCampaignIdGet: async (campaignId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('apiV1CategoryByCampaignCampaignIdGet', 'campaignId', campaignId)
            const localVarPath = `/api/v1/category/by-campaign/{campaignId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a category
         * @param {number} categoryId The ID of the category to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CategoryDeleteCategoryIdPut: async (categoryId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('apiV1CategoryDeleteCategoryIdPut', 'categoryId', categoryId)
            const localVarPath = `/api/v1/category/delete/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new category to a campaign
         * @param {ApiV1CategoryPostRequest} apiV1CategoryPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CategoryPost: async (apiV1CategoryPostRequest: ApiV1CategoryPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1CategoryPostRequest' is not null or undefined
            assertParamExists('apiV1CategoryPost', 'apiV1CategoryPostRequest', apiV1CategoryPostRequest)
            const localVarPath = `/api/v1/category/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CategoryPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing category
         * @param {number} categoryId The ID of the category to update
         * @param {ApiV1CategoryUpdateCategoryIdPutRequest} apiV1CategoryUpdateCategoryIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CategoryUpdateCategoryIdPut: async (categoryId: number, apiV1CategoryUpdateCategoryIdPutRequest: ApiV1CategoryUpdateCategoryIdPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('apiV1CategoryUpdateCategoryIdPut', 'categoryId', categoryId)
            // verify required parameter 'apiV1CategoryUpdateCategoryIdPutRequest' is not null or undefined
            assertParamExists('apiV1CategoryUpdateCategoryIdPut', 'apiV1CategoryUpdateCategoryIdPutRequest', apiV1CategoryUpdateCategoryIdPutRequest)
            const localVarPath = `/api/v1/category/update/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1CategoryUpdateCategoryIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryManagementApi - functional programming interface
 * @export
 */
export const CategoryManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve all categories by campaign
         * @param {number} campaignId The ID of the campaign to retrieve categories for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CategoryByCampaignCampaignIdGet(campaignId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignCategory>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CategoryByCampaignCampaignIdGet(campaignId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryManagementApi.apiV1CategoryByCampaignCampaignIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a category
         * @param {number} categoryId The ID of the category to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CategoryDeleteCategoryIdPut(categoryId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CategoryDeleteCategoryIdPut(categoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryManagementApi.apiV1CategoryDeleteCategoryIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add new category to a campaign
         * @param {ApiV1CategoryPostRequest} apiV1CategoryPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CategoryPost(apiV1CategoryPostRequest: ApiV1CategoryPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CategoryPost(apiV1CategoryPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryManagementApi.apiV1CategoryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an existing category
         * @param {number} categoryId The ID of the category to update
         * @param {ApiV1CategoryUpdateCategoryIdPutRequest} apiV1CategoryUpdateCategoryIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CategoryUpdateCategoryIdPut(categoryId: number, apiV1CategoryUpdateCategoryIdPutRequest: ApiV1CategoryUpdateCategoryIdPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CategoryUpdateCategoryIdPut(categoryId, apiV1CategoryUpdateCategoryIdPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryManagementApi.apiV1CategoryUpdateCategoryIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CategoryManagementApi - factory interface
 * @export
 */
export const CategoryManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryManagementApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve all categories by campaign
         * @param {number} campaignId The ID of the campaign to retrieve categories for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CategoryByCampaignCampaignIdGet(campaignId: number, options?: any): AxiosPromise<Array<CampaignCategory>> {
            return localVarFp.apiV1CategoryByCampaignCampaignIdGet(campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a category
         * @param {number} categoryId The ID of the category to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CategoryDeleteCategoryIdPut(categoryId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1CategoryDeleteCategoryIdPut(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new category to a campaign
         * @param {ApiV1CategoryPostRequest} apiV1CategoryPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CategoryPost(apiV1CategoryPostRequest: ApiV1CategoryPostRequest, options?: any): AxiosPromise<CampaignCategory> {
            return localVarFp.apiV1CategoryPost(apiV1CategoryPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing category
         * @param {number} categoryId The ID of the category to update
         * @param {ApiV1CategoryUpdateCategoryIdPutRequest} apiV1CategoryUpdateCategoryIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CategoryUpdateCategoryIdPut(categoryId: number, apiV1CategoryUpdateCategoryIdPutRequest: ApiV1CategoryUpdateCategoryIdPutRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1CategoryUpdateCategoryIdPut(categoryId, apiV1CategoryUpdateCategoryIdPutRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryManagementApi - object-oriented interface
 * @export
 * @class CategoryManagementApi
 * @extends {BaseAPI}
 */
export class CategoryManagementApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve all categories by campaign
     * @param {number} campaignId The ID of the campaign to retrieve categories for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryManagementApi
     */
    public apiV1CategoryByCampaignCampaignIdGet(campaignId: number, options?: RawAxiosRequestConfig) {
        return CategoryManagementApiFp(this.configuration).apiV1CategoryByCampaignCampaignIdGet(campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a category
     * @param {number} categoryId The ID of the category to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryManagementApi
     */
    public apiV1CategoryDeleteCategoryIdPut(categoryId: number, options?: RawAxiosRequestConfig) {
        return CategoryManagementApiFp(this.configuration).apiV1CategoryDeleteCategoryIdPut(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new category to a campaign
     * @param {ApiV1CategoryPostRequest} apiV1CategoryPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryManagementApi
     */
    public apiV1CategoryPost(apiV1CategoryPostRequest: ApiV1CategoryPostRequest, options?: RawAxiosRequestConfig) {
        return CategoryManagementApiFp(this.configuration).apiV1CategoryPost(apiV1CategoryPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing category
     * @param {number} categoryId The ID of the category to update
     * @param {ApiV1CategoryUpdateCategoryIdPutRequest} apiV1CategoryUpdateCategoryIdPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryManagementApi
     */
    public apiV1CategoryUpdateCategoryIdPut(categoryId: number, apiV1CategoryUpdateCategoryIdPutRequest: ApiV1CategoryUpdateCategoryIdPutRequest, options?: RawAxiosRequestConfig) {
        return CategoryManagementApiFp(this.configuration).apiV1CategoryUpdateCategoryIdPut(categoryId, apiV1CategoryUpdateCategoryIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ContactManagementApi - axios parameter creator
 * @export
 */
export const ContactManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve all contacts by campaign
         * @param {number} campaignId The ID of the campaign to retrieve contacts for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ContactByCampaignCampaignIdGet: async (campaignId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('apiV1ContactByCampaignCampaignIdGet', 'campaignId', campaignId)
            const localVarPath = `/api/v1/contact/by-campaign/{campaignId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a contact
         * @param {number} contactId The ID of the contact to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ContactDeleteContactIdPut: async (contactId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('apiV1ContactDeleteContactIdPut', 'contactId', contactId)
            const localVarPath = `/api/v1/contact/delete/{contactId}`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve all contacts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ContactGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/contact/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new contact
         * @param {ApiV1ContactPostRequest} apiV1ContactPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ContactPost: async (apiV1ContactPostRequest: ApiV1ContactPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ContactPostRequest' is not null or undefined
            assertParamExists('apiV1ContactPost', 'apiV1ContactPostRequest', apiV1ContactPostRequest)
            const localVarPath = `/api/v1/contact/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ContactPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing contact
         * @param {number} contactId The ID of the contact to update
         * @param {ApiV1ContactUpdateContactIdPutRequest} apiV1ContactUpdateContactIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ContactUpdateContactIdPut: async (contactId: number, apiV1ContactUpdateContactIdPutRequest: ApiV1ContactUpdateContactIdPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('apiV1ContactUpdateContactIdPut', 'contactId', contactId)
            // verify required parameter 'apiV1ContactUpdateContactIdPutRequest' is not null or undefined
            assertParamExists('apiV1ContactUpdateContactIdPut', 'apiV1ContactUpdateContactIdPutRequest', apiV1ContactUpdateContactIdPutRequest)
            const localVarPath = `/api/v1/contact/update/{contactId}`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ContactUpdateContactIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactManagementApi - functional programming interface
 * @export
 */
export const ContactManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve all contacts by campaign
         * @param {number} campaignId The ID of the campaign to retrieve contacts for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ContactByCampaignCampaignIdGet(campaignId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Contact>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ContactByCampaignCampaignIdGet(campaignId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactManagementApi.apiV1ContactByCampaignCampaignIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a contact
         * @param {number} contactId The ID of the contact to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ContactDeleteContactIdPut(contactId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ContactDeleteContactIdPut(contactId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactManagementApi.apiV1ContactDeleteContactIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve all contacts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ContactGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Contact>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ContactGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactManagementApi.apiV1ContactGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new contact
         * @param {ApiV1ContactPostRequest} apiV1ContactPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ContactPost(apiV1ContactPostRequest: ApiV1ContactPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Contact>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ContactPost(apiV1ContactPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactManagementApi.apiV1ContactPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an existing contact
         * @param {number} contactId The ID of the contact to update
         * @param {ApiV1ContactUpdateContactIdPutRequest} apiV1ContactUpdateContactIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ContactUpdateContactIdPut(contactId: number, apiV1ContactUpdateContactIdPutRequest: ApiV1ContactUpdateContactIdPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ContactUpdateContactIdPut(contactId, apiV1ContactUpdateContactIdPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactManagementApi.apiV1ContactUpdateContactIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContactManagementApi - factory interface
 * @export
 */
export const ContactManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactManagementApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve all contacts by campaign
         * @param {number} campaignId The ID of the campaign to retrieve contacts for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ContactByCampaignCampaignIdGet(campaignId: number, options?: any): AxiosPromise<Array<Contact>> {
            return localVarFp.apiV1ContactByCampaignCampaignIdGet(campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a contact
         * @param {number} contactId The ID of the contact to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ContactDeleteContactIdPut(contactId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ContactDeleteContactIdPut(contactId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve all contacts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ContactGet(options?: any): AxiosPromise<Array<Contact>> {
            return localVarFp.apiV1ContactGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new contact
         * @param {ApiV1ContactPostRequest} apiV1ContactPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ContactPost(apiV1ContactPostRequest: ApiV1ContactPostRequest, options?: any): AxiosPromise<Contact> {
            return localVarFp.apiV1ContactPost(apiV1ContactPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing contact
         * @param {number} contactId The ID of the contact to update
         * @param {ApiV1ContactUpdateContactIdPutRequest} apiV1ContactUpdateContactIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ContactUpdateContactIdPut(contactId: number, apiV1ContactUpdateContactIdPutRequest: ApiV1ContactUpdateContactIdPutRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ContactUpdateContactIdPut(contactId, apiV1ContactUpdateContactIdPutRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContactManagementApi - object-oriented interface
 * @export
 * @class ContactManagementApi
 * @extends {BaseAPI}
 */
export class ContactManagementApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve all contacts by campaign
     * @param {number} campaignId The ID of the campaign to retrieve contacts for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactManagementApi
     */
    public apiV1ContactByCampaignCampaignIdGet(campaignId: number, options?: RawAxiosRequestConfig) {
        return ContactManagementApiFp(this.configuration).apiV1ContactByCampaignCampaignIdGet(campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a contact
     * @param {number} contactId The ID of the contact to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactManagementApi
     */
    public apiV1ContactDeleteContactIdPut(contactId: number, options?: RawAxiosRequestConfig) {
        return ContactManagementApiFp(this.configuration).apiV1ContactDeleteContactIdPut(contactId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve all contacts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactManagementApi
     */
    public apiV1ContactGet(options?: RawAxiosRequestConfig) {
        return ContactManagementApiFp(this.configuration).apiV1ContactGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new contact
     * @param {ApiV1ContactPostRequest} apiV1ContactPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactManagementApi
     */
    public apiV1ContactPost(apiV1ContactPostRequest: ApiV1ContactPostRequest, options?: RawAxiosRequestConfig) {
        return ContactManagementApiFp(this.configuration).apiV1ContactPost(apiV1ContactPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing contact
     * @param {number} contactId The ID of the contact to update
     * @param {ApiV1ContactUpdateContactIdPutRequest} apiV1ContactUpdateContactIdPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactManagementApi
     */
    public apiV1ContactUpdateContactIdPut(contactId: number, apiV1ContactUpdateContactIdPutRequest: ApiV1ContactUpdateContactIdPutRequest, options?: RawAxiosRequestConfig) {
        return ContactManagementApiFp(this.configuration).apiV1ContactUpdateContactIdPut(contactId, apiV1ContactUpdateContactIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PhoneNumberManagementApi - axios parameter creator
 * @export
 */
export const PhoneNumberManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List available Twilio phone numbers that match the search criteria
         * @param {string} [searchTerm] Optional search term for filtering phone numbers (e.g., \&#39;510555\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PhoneNumberAvailableNumbersGet: async (searchTerm?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/phone-number/available-numbers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (searchTerm !== undefined) {
                localVarQueryParameter['searchTerm'] = searchTerm;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deactivate a registered phone number
         * @param {number} phoneNumberId The ID of the phone number to deactivate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PhoneNumberDeletePhoneNumberIdPut: async (phoneNumberId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneNumberId' is not null or undefined
            assertParamExists('apiV1PhoneNumberDeletePhoneNumberIdPut', 'phoneNumberId', phoneNumberId)
            const localVarPath = `/api/v1/phone-number/delete/{phoneNumberId}`
                .replace(`{${"phoneNumberId"}}`, encodeURIComponent(String(phoneNumberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Purchase and register a new phone number
         * @param {ApiV1PhoneNumberPurchaseNumberPostRequest} apiV1PhoneNumberPurchaseNumberPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PhoneNumberPurchaseNumberPost: async (apiV1PhoneNumberPurchaseNumberPostRequest: ApiV1PhoneNumberPurchaseNumberPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PhoneNumberPurchaseNumberPostRequest' is not null or undefined
            assertParamExists('apiV1PhoneNumberPurchaseNumberPost', 'apiV1PhoneNumberPurchaseNumberPostRequest', apiV1PhoneNumberPurchaseNumberPostRequest)
            const localVarPath = `/api/v1/phone-number/purchase-number`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PhoneNumberPurchaseNumberPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve all phone numbers associated with the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PhoneNumberUserNumbersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/phone-number/user-numbers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PhoneNumberManagementApi - functional programming interface
 * @export
 */
export const PhoneNumberManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PhoneNumberManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List available Twilio phone numbers that match the search criteria
         * @param {string} [searchTerm] Optional search term for filtering phone numbers (e.g., \&#39;510555\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PhoneNumberAvailableNumbersGet(searchTerm?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV1PhoneNumberAvailableNumbersGet200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PhoneNumberAvailableNumbersGet(searchTerm, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhoneNumberManagementApi.apiV1PhoneNumberAvailableNumbersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deactivate a registered phone number
         * @param {number} phoneNumberId The ID of the phone number to deactivate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PhoneNumberDeletePhoneNumberIdPut(phoneNumberId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PhoneNumberDeletePhoneNumberIdPut(phoneNumberId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhoneNumberManagementApi.apiV1PhoneNumberDeletePhoneNumberIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Purchase and register a new phone number
         * @param {ApiV1PhoneNumberPurchaseNumberPostRequest} apiV1PhoneNumberPurchaseNumberPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PhoneNumberPurchaseNumberPost(apiV1PhoneNumberPurchaseNumberPostRequest: ApiV1PhoneNumberPurchaseNumberPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneNumber>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PhoneNumberPurchaseNumberPost(apiV1PhoneNumberPurchaseNumberPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhoneNumberManagementApi.apiV1PhoneNumberPurchaseNumberPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve all phone numbers associated with the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PhoneNumberUserNumbersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PhoneNumber>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PhoneNumberUserNumbersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhoneNumberManagementApi.apiV1PhoneNumberUserNumbersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PhoneNumberManagementApi - factory interface
 * @export
 */
export const PhoneNumberManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PhoneNumberManagementApiFp(configuration)
    return {
        /**
         * 
         * @summary List available Twilio phone numbers that match the search criteria
         * @param {string} [searchTerm] Optional search term for filtering phone numbers (e.g., \&#39;510555\&#39;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PhoneNumberAvailableNumbersGet(searchTerm?: string, options?: any): AxiosPromise<Array<ApiV1PhoneNumberAvailableNumbersGet200ResponseInner>> {
            return localVarFp.apiV1PhoneNumberAvailableNumbersGet(searchTerm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deactivate a registered phone number
         * @param {number} phoneNumberId The ID of the phone number to deactivate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PhoneNumberDeletePhoneNumberIdPut(phoneNumberId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1PhoneNumberDeletePhoneNumberIdPut(phoneNumberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Purchase and register a new phone number
         * @param {ApiV1PhoneNumberPurchaseNumberPostRequest} apiV1PhoneNumberPurchaseNumberPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PhoneNumberPurchaseNumberPost(apiV1PhoneNumberPurchaseNumberPostRequest: ApiV1PhoneNumberPurchaseNumberPostRequest, options?: any): AxiosPromise<PhoneNumber> {
            return localVarFp.apiV1PhoneNumberPurchaseNumberPost(apiV1PhoneNumberPurchaseNumberPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve all phone numbers associated with the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PhoneNumberUserNumbersGet(options?: any): AxiosPromise<Array<PhoneNumber>> {
            return localVarFp.apiV1PhoneNumberUserNumbersGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PhoneNumberManagementApi - object-oriented interface
 * @export
 * @class PhoneNumberManagementApi
 * @extends {BaseAPI}
 */
export class PhoneNumberManagementApi extends BaseAPI {
    /**
     * 
     * @summary List available Twilio phone numbers that match the search criteria
     * @param {string} [searchTerm] Optional search term for filtering phone numbers (e.g., \&#39;510555\&#39;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumberManagementApi
     */
    public apiV1PhoneNumberAvailableNumbersGet(searchTerm?: string, options?: RawAxiosRequestConfig) {
        return PhoneNumberManagementApiFp(this.configuration).apiV1PhoneNumberAvailableNumbersGet(searchTerm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deactivate a registered phone number
     * @param {number} phoneNumberId The ID of the phone number to deactivate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumberManagementApi
     */
    public apiV1PhoneNumberDeletePhoneNumberIdPut(phoneNumberId: number, options?: RawAxiosRequestConfig) {
        return PhoneNumberManagementApiFp(this.configuration).apiV1PhoneNumberDeletePhoneNumberIdPut(phoneNumberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Purchase and register a new phone number
     * @param {ApiV1PhoneNumberPurchaseNumberPostRequest} apiV1PhoneNumberPurchaseNumberPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumberManagementApi
     */
    public apiV1PhoneNumberPurchaseNumberPost(apiV1PhoneNumberPurchaseNumberPostRequest: ApiV1PhoneNumberPurchaseNumberPostRequest, options?: RawAxiosRequestConfig) {
        return PhoneNumberManagementApiFp(this.configuration).apiV1PhoneNumberPurchaseNumberPost(apiV1PhoneNumberPurchaseNumberPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve all phone numbers associated with the authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumberManagementApi
     */
    public apiV1PhoneNumberUserNumbersGet(options?: RawAxiosRequestConfig) {
        return PhoneNumberManagementApiFp(this.configuration).apiV1PhoneNumberUserNumbersGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SMSApi - axios parameter creator
 * @export
 */
export const SMSApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Fetch all messages sent in a specific campaign
         * @param {number} campaignId The campaign ID to fetch messages for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SmsMessagesCampaignIdGet: async (campaignId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('apiV1SmsMessagesCampaignIdGet', 'campaignId', campaignId)
            const localVarPath = `/api/v1/sms/messages/{campaignId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive incoming SMS responses
         * @param {ApiV1SmsReceivePostRequest} apiV1SmsReceivePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SmsReceivePost: async (apiV1SmsReceivePostRequest: ApiV1SmsReceivePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1SmsReceivePostRequest' is not null or undefined
            assertParamExists('apiV1SmsReceivePost', 'apiV1SmsReceivePostRequest', apiV1SmsReceivePostRequest)
            const localVarPath = `/api/v1/sms/receive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SmsReceivePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch all responses for a specific campaign
         * @param {number} campaignId The campaign ID to fetch responses for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SmsResponsesCampaignIdGet: async (campaignId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('apiV1SmsResponsesCampaignIdGet', 'campaignId', campaignId)
            const localVarPath = `/api/v1/sms/responses/{campaignId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send bulk SMS to all contacts in a campaign
         * @param {ApiV1SmsSendBulkPostRequest} apiV1SmsSendBulkPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SmsSendBulkPost: async (apiV1SmsSendBulkPostRequest: ApiV1SmsSendBulkPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1SmsSendBulkPostRequest' is not null or undefined
            assertParamExists('apiV1SmsSendBulkPost', 'apiV1SmsSendBulkPostRequest', apiV1SmsSendBulkPostRequest)
            const localVarPath = `/api/v1/sms/sendBulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SmsSendBulkPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Handle message status updates from Twilio
         * @param {ApiV1SmsStatusPostRequest} apiV1SmsStatusPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SmsStatusPost: async (apiV1SmsStatusPostRequest: ApiV1SmsStatusPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1SmsStatusPostRequest' is not null or undefined
            assertParamExists('apiV1SmsStatusPost', 'apiV1SmsStatusPostRequest', apiV1SmsStatusPostRequest)
            const localVarPath = `/api/v1/sms/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SmsStatusPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SMSApi - functional programming interface
 * @export
 */
export const SMSApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SMSApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Fetch all messages sent in a specific campaign
         * @param {number} campaignId The campaign ID to fetch messages for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SmsMessagesCampaignIdGet(campaignId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Message>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SmsMessagesCampaignIdGet(campaignId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SMSApi.apiV1SmsMessagesCampaignIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Receive incoming SMS responses
         * @param {ApiV1SmsReceivePostRequest} apiV1SmsReceivePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SmsReceivePost(apiV1SmsReceivePostRequest: ApiV1SmsReceivePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SmsReceivePost(apiV1SmsReceivePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SMSApi.apiV1SmsReceivePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fetch all responses for a specific campaign
         * @param {number} campaignId The campaign ID to fetch responses for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SmsResponsesCampaignIdGet(campaignId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Response>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SmsResponsesCampaignIdGet(campaignId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SMSApi.apiV1SmsResponsesCampaignIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Send bulk SMS to all contacts in a campaign
         * @param {ApiV1SmsSendBulkPostRequest} apiV1SmsSendBulkPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SmsSendBulkPost(apiV1SmsSendBulkPostRequest: ApiV1SmsSendBulkPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SmsSendBulkPost(apiV1SmsSendBulkPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SMSApi.apiV1SmsSendBulkPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Handle message status updates from Twilio
         * @param {ApiV1SmsStatusPostRequest} apiV1SmsStatusPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SmsStatusPost(apiV1SmsStatusPostRequest: ApiV1SmsStatusPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SmsStatusPost(apiV1SmsStatusPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SMSApi.apiV1SmsStatusPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SMSApi - factory interface
 * @export
 */
export const SMSApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SMSApiFp(configuration)
    return {
        /**
         * 
         * @summary Fetch all messages sent in a specific campaign
         * @param {number} campaignId The campaign ID to fetch messages for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SmsMessagesCampaignIdGet(campaignId: number, options?: any): AxiosPromise<Array<Message>> {
            return localVarFp.apiV1SmsMessagesCampaignIdGet(campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Receive incoming SMS responses
         * @param {ApiV1SmsReceivePostRequest} apiV1SmsReceivePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SmsReceivePost(apiV1SmsReceivePostRequest: ApiV1SmsReceivePostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1SmsReceivePost(apiV1SmsReceivePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch all responses for a specific campaign
         * @param {number} campaignId The campaign ID to fetch responses for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SmsResponsesCampaignIdGet(campaignId: number, options?: any): AxiosPromise<Array<Response>> {
            return localVarFp.apiV1SmsResponsesCampaignIdGet(campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send bulk SMS to all contacts in a campaign
         * @param {ApiV1SmsSendBulkPostRequest} apiV1SmsSendBulkPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SmsSendBulkPost(apiV1SmsSendBulkPostRequest: ApiV1SmsSendBulkPostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1SmsSendBulkPost(apiV1SmsSendBulkPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Handle message status updates from Twilio
         * @param {ApiV1SmsStatusPostRequest} apiV1SmsStatusPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SmsStatusPost(apiV1SmsStatusPostRequest: ApiV1SmsStatusPostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1SmsStatusPost(apiV1SmsStatusPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SMSApi - object-oriented interface
 * @export
 * @class SMSApi
 * @extends {BaseAPI}
 */
export class SMSApi extends BaseAPI {
    /**
     * 
     * @summary Fetch all messages sent in a specific campaign
     * @param {number} campaignId The campaign ID to fetch messages for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMSApi
     */
    public apiV1SmsMessagesCampaignIdGet(campaignId: number, options?: RawAxiosRequestConfig) {
        return SMSApiFp(this.configuration).apiV1SmsMessagesCampaignIdGet(campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Receive incoming SMS responses
     * @param {ApiV1SmsReceivePostRequest} apiV1SmsReceivePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMSApi
     */
    public apiV1SmsReceivePost(apiV1SmsReceivePostRequest: ApiV1SmsReceivePostRequest, options?: RawAxiosRequestConfig) {
        return SMSApiFp(this.configuration).apiV1SmsReceivePost(apiV1SmsReceivePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch all responses for a specific campaign
     * @param {number} campaignId The campaign ID to fetch responses for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMSApi
     */
    public apiV1SmsResponsesCampaignIdGet(campaignId: number, options?: RawAxiosRequestConfig) {
        return SMSApiFp(this.configuration).apiV1SmsResponsesCampaignIdGet(campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send bulk SMS to all contacts in a campaign
     * @param {ApiV1SmsSendBulkPostRequest} apiV1SmsSendBulkPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMSApi
     */
    public apiV1SmsSendBulkPost(apiV1SmsSendBulkPostRequest: ApiV1SmsSendBulkPostRequest, options?: RawAxiosRequestConfig) {
        return SMSApiFp(this.configuration).apiV1SmsSendBulkPost(apiV1SmsSendBulkPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Handle message status updates from Twilio
     * @param {ApiV1SmsStatusPostRequest} apiV1SmsStatusPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMSApi
     */
    public apiV1SmsStatusPost(apiV1SmsStatusPostRequest: ApiV1SmsStatusPostRequest, options?: RawAxiosRequestConfig) {
        return SMSApiFp(this.configuration).apiV1SmsStatusPost(apiV1SmsStatusPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SubscriptionTiersApi - axios parameter creator
 * @export
 */
export const SubscriptionTiersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a subscription tier
         * @param {number} tierId The ID of the subscription tier to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SubscriptionDeleteTierIdDelete: async (tierId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tierId' is not null or undefined
            assertParamExists('apiV1SubscriptionDeleteTierIdDelete', 'tierId', tierId)
            const localVarPath = `/api/v1/subscription/delete/{tierId}`
                .replace(`{${"tierId"}}`, encodeURIComponent(String(tierId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve all subscription tiers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SubscriptionGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/subscription/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new subscription tier
         * @param {ApiV1SubscriptionPostRequest} apiV1SubscriptionPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SubscriptionPost: async (apiV1SubscriptionPostRequest: ApiV1SubscriptionPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1SubscriptionPostRequest' is not null or undefined
            assertParamExists('apiV1SubscriptionPost', 'apiV1SubscriptionPostRequest', apiV1SubscriptionPostRequest)
            const localVarPath = `/api/v1/subscription/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SubscriptionPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a subscription tier
         * @param {number} tierId The ID of the subscription tier to update
         * @param {ApiV1SubscriptionUpdateTierIdPutRequest} apiV1SubscriptionUpdateTierIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SubscriptionUpdateTierIdPut: async (tierId: number, apiV1SubscriptionUpdateTierIdPutRequest: ApiV1SubscriptionUpdateTierIdPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tierId' is not null or undefined
            assertParamExists('apiV1SubscriptionUpdateTierIdPut', 'tierId', tierId)
            // verify required parameter 'apiV1SubscriptionUpdateTierIdPutRequest' is not null or undefined
            assertParamExists('apiV1SubscriptionUpdateTierIdPut', 'apiV1SubscriptionUpdateTierIdPutRequest', apiV1SubscriptionUpdateTierIdPutRequest)
            const localVarPath = `/api/v1/subscription/update/{tierId}`
                .replace(`{${"tierId"}}`, encodeURIComponent(String(tierId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SubscriptionUpdateTierIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubscriptionTiersApi - functional programming interface
 * @export
 */
export const SubscriptionTiersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubscriptionTiersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete a subscription tier
         * @param {number} tierId The ID of the subscription tier to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SubscriptionDeleteTierIdDelete(tierId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SubscriptionDeleteTierIdDelete(tierId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubscriptionTiersApi.apiV1SubscriptionDeleteTierIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve all subscription tiers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SubscriptionGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SubscriptionTier>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SubscriptionGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubscriptionTiersApi.apiV1SubscriptionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new subscription tier
         * @param {ApiV1SubscriptionPostRequest} apiV1SubscriptionPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SubscriptionPost(apiV1SubscriptionPostRequest: ApiV1SubscriptionPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionTier>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SubscriptionPost(apiV1SubscriptionPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubscriptionTiersApi.apiV1SubscriptionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a subscription tier
         * @param {number} tierId The ID of the subscription tier to update
         * @param {ApiV1SubscriptionUpdateTierIdPutRequest} apiV1SubscriptionUpdateTierIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SubscriptionUpdateTierIdPut(tierId: number, apiV1SubscriptionUpdateTierIdPutRequest: ApiV1SubscriptionUpdateTierIdPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SubscriptionUpdateTierIdPut(tierId, apiV1SubscriptionUpdateTierIdPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubscriptionTiersApi.apiV1SubscriptionUpdateTierIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SubscriptionTiersApi - factory interface
 * @export
 */
export const SubscriptionTiersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubscriptionTiersApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete a subscription tier
         * @param {number} tierId The ID of the subscription tier to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SubscriptionDeleteTierIdDelete(tierId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1SubscriptionDeleteTierIdDelete(tierId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve all subscription tiers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SubscriptionGet(options?: any): AxiosPromise<Array<SubscriptionTier>> {
            return localVarFp.apiV1SubscriptionGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new subscription tier
         * @param {ApiV1SubscriptionPostRequest} apiV1SubscriptionPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SubscriptionPost(apiV1SubscriptionPostRequest: ApiV1SubscriptionPostRequest, options?: any): AxiosPromise<SubscriptionTier> {
            return localVarFp.apiV1SubscriptionPost(apiV1SubscriptionPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a subscription tier
         * @param {number} tierId The ID of the subscription tier to update
         * @param {ApiV1SubscriptionUpdateTierIdPutRequest} apiV1SubscriptionUpdateTierIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SubscriptionUpdateTierIdPut(tierId: number, apiV1SubscriptionUpdateTierIdPutRequest: ApiV1SubscriptionUpdateTierIdPutRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1SubscriptionUpdateTierIdPut(tierId, apiV1SubscriptionUpdateTierIdPutRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubscriptionTiersApi - object-oriented interface
 * @export
 * @class SubscriptionTiersApi
 * @extends {BaseAPI}
 */
export class SubscriptionTiersApi extends BaseAPI {
    /**
     * 
     * @summary Delete a subscription tier
     * @param {number} tierId The ID of the subscription tier to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionTiersApi
     */
    public apiV1SubscriptionDeleteTierIdDelete(tierId: number, options?: RawAxiosRequestConfig) {
        return SubscriptionTiersApiFp(this.configuration).apiV1SubscriptionDeleteTierIdDelete(tierId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve all subscription tiers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionTiersApi
     */
    public apiV1SubscriptionGet(options?: RawAxiosRequestConfig) {
        return SubscriptionTiersApiFp(this.configuration).apiV1SubscriptionGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new subscription tier
     * @param {ApiV1SubscriptionPostRequest} apiV1SubscriptionPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionTiersApi
     */
    public apiV1SubscriptionPost(apiV1SubscriptionPostRequest: ApiV1SubscriptionPostRequest, options?: RawAxiosRequestConfig) {
        return SubscriptionTiersApiFp(this.configuration).apiV1SubscriptionPost(apiV1SubscriptionPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a subscription tier
     * @param {number} tierId The ID of the subscription tier to update
     * @param {ApiV1SubscriptionUpdateTierIdPutRequest} apiV1SubscriptionUpdateTierIdPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionTiersApi
     */
    public apiV1SubscriptionUpdateTierIdPut(tierId: number, apiV1SubscriptionUpdateTierIdPutRequest: ApiV1SubscriptionUpdateTierIdPutRequest, options?: RawAxiosRequestConfig) {
        return SubscriptionTiersApiFp(this.configuration).apiV1SubscriptionUpdateTierIdPut(tierId, apiV1SubscriptionUpdateTierIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserDeleteDelete: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Authenticate user and return JWT and user details
         * @param {ApiV1UserLoginPostRequest} apiV1UserLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserLoginPost: async (apiV1UserLoginPostRequest: ApiV1UserLoginPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1UserLoginPostRequest' is not null or undefined
            assertParamExists('apiV1UserLoginPost', 'apiV1UserLoginPostRequest', apiV1UserLoginPostRequest)
            const localVarPath = `/api/v1/user/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1UserLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register a new user
         * @param {ApiV1UserRegisterPostRequest} apiV1UserRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserRegisterPost: async (apiV1UserRegisterPostRequest: ApiV1UserRegisterPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1UserRegisterPostRequest' is not null or undefined
            assertParamExists('apiV1UserRegisterPost', 'apiV1UserRegisterPostRequest', apiV1UserRegisterPostRequest)
            const localVarPath = `/api/v1/user/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1UserRegisterPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user information
         * @param {ApiV1UserUpdatePutRequest} apiV1UserUpdatePutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserUpdatePut: async (apiV1UserUpdatePutRequest: ApiV1UserUpdatePutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1UserUpdatePutRequest' is not null or undefined
            assertParamExists('apiV1UserUpdatePut', 'apiV1UserUpdatePutRequest', apiV1UserUpdatePutRequest)
            const localVarPath = `/api/v1/user/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1UserUpdatePutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a specific user by ID
         * @param {number} userId The ID of the user to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserUserIdGet: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiV1UserUserIdGet', 'userId', userId)
            const localVarPath = `/api/v1/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserDeleteDelete(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserDeleteDelete(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiV1UserDeleteDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Authenticate user and return JWT and user details
         * @param {ApiV1UserLoginPostRequest} apiV1UserLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserLoginPost(apiV1UserLoginPostRequest: ApiV1UserLoginPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1UserLoginPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserLoginPost(apiV1UserLoginPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiV1UserLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Register a new user
         * @param {ApiV1UserRegisterPostRequest} apiV1UserRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserRegisterPost(apiV1UserRegisterPostRequest: ApiV1UserRegisterPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1UserRegisterPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserRegisterPost(apiV1UserRegisterPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiV1UserRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update user information
         * @param {ApiV1UserUpdatePutRequest} apiV1UserUpdatePutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserUpdatePut(apiV1UserUpdatePutRequest: ApiV1UserUpdatePutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserUpdatePut(apiV1UserUpdatePutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiV1UserUpdatePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a specific user by ID
         * @param {number} userId The ID of the user to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserUserIdGet(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserUserIdGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiV1UserUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserDeleteDelete(options?: any): AxiosPromise<void> {
            return localVarFp.apiV1UserDeleteDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Authenticate user and return JWT and user details
         * @param {ApiV1UserLoginPostRequest} apiV1UserLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserLoginPost(apiV1UserLoginPostRequest: ApiV1UserLoginPostRequest, options?: any): AxiosPromise<ApiV1UserLoginPost200Response> {
            return localVarFp.apiV1UserLoginPost(apiV1UserLoginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register a new user
         * @param {ApiV1UserRegisterPostRequest} apiV1UserRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserRegisterPost(apiV1UserRegisterPostRequest: ApiV1UserRegisterPostRequest, options?: any): AxiosPromise<ApiV1UserRegisterPost201Response> {
            return localVarFp.apiV1UserRegisterPost(apiV1UserRegisterPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update user information
         * @param {ApiV1UserUpdatePutRequest} apiV1UserUpdatePutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserUpdatePut(apiV1UserUpdatePutRequest: ApiV1UserUpdatePutRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1UserUpdatePut(apiV1UserUpdatePutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a specific user by ID
         * @param {number} userId The ID of the user to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserUserIdGet(userId: number, options?: any): AxiosPromise<User> {
            return localVarFp.apiV1UserUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Delete a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiV1UserDeleteDelete(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiV1UserDeleteDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Authenticate user and return JWT and user details
     * @param {ApiV1UserLoginPostRequest} apiV1UserLoginPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiV1UserLoginPost(apiV1UserLoginPostRequest: ApiV1UserLoginPostRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiV1UserLoginPost(apiV1UserLoginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register a new user
     * @param {ApiV1UserRegisterPostRequest} apiV1UserRegisterPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiV1UserRegisterPost(apiV1UserRegisterPostRequest: ApiV1UserRegisterPostRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiV1UserRegisterPost(apiV1UserRegisterPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update user information
     * @param {ApiV1UserUpdatePutRequest} apiV1UserUpdatePutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiV1UserUpdatePut(apiV1UserUpdatePutRequest: ApiV1UserUpdatePutRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiV1UserUpdatePut(apiV1UserUpdatePutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a specific user by ID
     * @param {number} userId The ID of the user to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiV1UserUserIdGet(userId: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiV1UserUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }
}



